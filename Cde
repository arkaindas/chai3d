<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Origin & Destination Validation</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
    }

    .ez-locator_search-row {
      margin-bottom: 12px;
      position: relative;
    }

    .ez-locator_search-row input {
      width: 320px;
      padding: 10px;
      font-size: 16px;
      border: 2px solid #ccc;
      border-radius: 6px;
      outline: none;
    }

    .ez-locator_search-row input.error {
      border-color: red;
    }

    .error-message {
      font-size: 14px;
      color: red;
      margin-top: 8px;
      display: none;
    }

    .error-message.active {
      display: block;
    }

    button {
      padding: 10px 16px;
      font-size: 16px;
      border: none;
      border-radius: 6px;
      background: #0078d7;
      color: #fff;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <form id="ez-locator_search-form">
    <div class="ez-locator_search-row">
      <input id="ez-search-origin" type="text" placeholder="Start from (Origin)" autocomplete="off">
    </div>

    <div class="ez-locator_search-row">
      <input id="ez-search-destination" type="text" placeholder="Where to (Destination)" autocomplete="off">
    </div>

    <!-- Single shared error message -->
    <div class="error-message" id="form-error">Origin and Destination are required</div>

    <button type="submit">Search</button>
  </form>

  <script>
    const originInput = document.getElementById('ez-search-origin');
    const destinationInput = document.getElementById('ez-search-destination');
    const formError = document.getElementById('form-error');
    const form = document.getElementById('ez-locator_search-form');

    function validateForm() {
      const originEmpty = originInput.value.trim() === "";
      const destinationEmpty = destinationInput.value.trim() === "";

      if (originEmpty || destinationEmpty) {
        originInput.classList.toggle("error", originEmpty);
        destinationInput.classList.toggle("error", destinationEmpty);
        formError.classList.add("active");
        return false;
      } else {
        originInput.classList.remove("error");
        destinationInput.classList.remove("error");
        formError.classList.remove("active");
        return true;
      }
    }

    // live validation on input
    originInput.addEventListener("input", validateForm);
    destinationInput.addEventListener("input", validateForm);

    // on form submit
    form.addEventListener("submit", (e) => {
      if (!validateForm()) {
        e.preventDefault(); // block form submission
      }
    });
  </script>

</body>
</html>
