const canvas = document.getElementById("scratchCanvas");
const ctx = canvas.getContext("2d");

let isDrawing = false;
let revealed = false;

// Load pattern overlay
const patternImg = new Image();
patternImg.src = "data:image/svg+xml;utf8,\
<svg xmlns='http://www.w3.org/2000/svg' width='260' height='260'>\
<g stroke='white' stroke-width='1' fill='none' opacity='0.15'>\
<rect x='15' y='15' width='40' height='40' rx='4'/>\
<circle cx='130' cy='70' r='18'/>\
<rect x='180' y='30' width='50' height='30' rx='4'/>\
</g></svg>";

patternImg.onload = () => {
  drawSurface();
};

function drawSurface() {
  ctx.globalCompositeOperation = "source-over";
  ctx.fillStyle = "#00a859";
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  ctx.globalAlpha = 0.3;
  ctx.drawImage(patternImg, 0, 0, canvas.width, canvas.height);
  ctx.globalAlpha = 1.0;
}

function scratch(x, y) {
  ctx.globalCompositeOperation = "destination-out";
  ctx.beginPath();
  ctx.arc(x, y, 20, 0, Math.PI * 2);
  ctx.fill();

  checkReveal();
}

function getXY(e) {
  const rect = canvas.getBoundingClientRect();
  const x = (e.touches ? e.touches[0].clientX : e.clientX) - rect.left;
  const y = (e.touches ? e.touches[0].clientY : e.clientY) - rect.top;
  return { x, y };
}

// Check how much is scratched
function checkReveal() {
  if (revealed) return;

  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
  let cleared = 0;
  for (let i = 3; i < imageData.data.length; i += 4) {
    if (imageData.data[i] === 0) cleared++;
  }

  const clearedPercent = cleared / (canvas.width * canvas.height) * 100;

  if (clearedPercent > 70) {
    revealed = true;
    canvas.classList.add("revealed");
    setTimeout(() => {
      canvas.style.display = "none";
    }, 1200);
  }
}

// Event listeners
canvas.addEventListener("mousedown", () => (isDrawing = true));
canvas.addEventListener("mouseup", () => (isDrawing = false));
canvas.addEventListener("mousemove", (e) => {
  if (!isDrawing || revealed) return;
  const { x, y } = getXY(e);
  scratch(x, y);
});

canvas.addEventListener("touchstart", () => (isDrawing = true));
canvas.addEventListener("touchend", () => (isDrawing = false));
canvas.addEventListener("touchmove", (e) => {
  if (!isDrawing || revealed) return;
  const { x, y } = getXY(e);
  scratch(x, y);
  e.preventDefault();
});
