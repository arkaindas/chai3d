<style>
  .wheel-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: 40px;
  }

  .wheel-container {
    position: relative;
    width: min(90vw, 400px);
    aspect-ratio: 1 / 1; /* always perfect circle */
    margin: 0 auto;
    border-radius: 50%;
    background: radial-gradient(circle at 30% 30%, #ffffff 0%, #d0d0d0 100%);
    box-shadow: inset 0 0 25px rgba(0, 0, 0, 0.25),
                0 6px 18px rgba(0, 0, 0, 0.3);
  }

  canvas {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    display: block;
  }

  /* Top arrow */
  .wheel-arrow {
    position: absolute;
    top: -16px;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 14px solid transparent;
    border-right: 14px solid transparent;
    border-bottom: 24px solid #d62828;
    z-index: 10;
    filter: drop-shadow(0 2px 2px rgba(0,0,0,0.3));
  }

  .spin-btn {
    margin-top: 15px;
    padding: 10px 24px;
    background: linear-gradient(180deg, #333, #111);
    color: #fff;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: bold;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
    transition: 0.2s;
  }
  .spin-btn:hover {
    background: linear-gradient(180deg, #444, #222);
    transform: scale(1.05);
  }
</style>

<div class="wheel-wrapper">
  <div class="wheel-container">
    <div class="wheel-arrow"></div>
    <canvas id="wheelCanvas"></canvas>
  </div>
  <button class="spin-btn" id="spinBtn">SPIN</button>
</div>

<script>
class SpinWheel {
  constructor(canvasId, options = {}) {
    this.canvas = document.getElementById(canvasId);
    this.ctx = this.canvas.getContext("2d");

    this.segments = options.segments || [
      "Tip of the Day",
      "Trivia Time",
      "Myth Buster",
      "Test Your IQ",
      "Learn Something New",
      "Community Info"
    ];
    this.colors = options.colors || ["#18c37a", "#ffffff"];
    this.onResult = options.onResult || (() => {});

    this.rotation = 0;
    this.angularVelocity = 0;
    this.isSpinning = false;

    this.resizeCanvas();
    window.addEventListener("resize", () => this.resizeCanvas());
    this.draw();
  }

  resizeCanvas() {
    const parent = this.canvas.parentElement;
    const size = parent.offsetWidth;
    this.canvas.width = size * 2;
    this.canvas.height = size * 2;
    this.size = size;
    this.draw();
  }

  draw() {
    const { ctx, size, segments, colors } = this;
    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    ctx.save();
    ctx.translate(size, size);

    const anglePerSeg = (2 * Math.PI) / segments.length;
    for (let i = 0; i < segments.length; i++) {
      const start = i * anglePerSeg;
      const end = start + anglePerSeg;

      ctx.beginPath();
      ctx.moveTo(0, 0);
      ctx.arc(0, 0, size - 15, start, end);
      ctx.fillStyle = colors[i % colors.length];
      ctx.fill();

      // separator lines
      ctx.strokeStyle = "#333";
      ctx.lineWidth = 2;
      ctx.stroke();

      // Text
      ctx.save();
      ctx.rotate(start + anglePerSeg / 2);
      ctx.textAlign = "right";
      ctx.fillStyle = "#000";
      ctx.font = `${Math.max(size / 14, 10)}px Poppins, sans-serif`;
      ctx.fillText(segments[i], size - 25, 5);
      ctx.restore();
    }

    // center hub
    ctx.beginPath();
    ctx.arc(0, 0, size * 0.2, 0, 2 * Math.PI);
    ctx.fillStyle = "#fff";
    ctx.fill();
    ctx.strokeStyle = "#999";
    ctx.lineWidth = 2;
    ctx.stroke();

    ctx.fillStyle = "#000";
    ctx.font = `${Math.max(size / 10, 12)}px Poppins, sans-serif`;
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    ctx.fillText("SPIN", 0, 0);

    ctx.restore();
  }

  spin() {
    if (this.isSpinning) return;
    this.isSpinning = true;

    this.rotation = 0;
    this.angularVelocity = (Math.random() * 0.35 + 0.35) * Math.PI;
    this.friction = 0.992 + Math.random() * 0.003;
    this.minVelocity = 0.002;

    const animate = () => {
      if (!this.isSpinning) return;
      this.rotation += this.angularVelocity;
      this.rotation %= 2 * Math.PI;
      this.angularVelocity *= this.friction;
      this.drawRotated();

      if (this.angularVelocity < this.minVelocity) {
        this.isSpinning = false;
        this.triggerResult();
      } else {
        requestAnimationFrame(animate);
      }
    };
    requestAnimationFrame(animate);
  }

  drawRotated() {
    const { ctx, canvas, size } = this;
    ctx.save();
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.translate(size, size);
    ctx.rotate(this.rotation);
    ctx.translate(-size, -size);
    this.draw();
    ctx.restore();
  }

  triggerResult() {
    const segmentAngle = (2 * Math.PI) / this.segments.length;
    const correctedAngle = (Math.PI * 1.5 - this.rotation) % (2 * Math.PI);
    const normalized = (correctedAngle + 2 * Math.PI) % (2 * Math.PI);
    const index = Math.floor(normalized / segmentAngle) % this.segments.length;
    const value = this.segments[index];
    this.onResult(value);
  }
}

const wheel = new SpinWheel("wheelCanvas", {
  onResult: (val) => {
    alert("You got: " + val);
  },
});

document.getElementById("spinBtn").addEventListener("click", () => {
  wheel.spin();
});
</script>
